name: Comment Guidelines on All Open Issues

on:
  workflow_dispatch:

permissions:
  issues: write

jobs:
  comment-all:
    runs-on: ubuntu-latest
    steps:
      - name: Comment guidelines on every open issue (skip PRs)
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Comment on issues missing the guidelines
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // Fetch all open issues (this includes pull requests; we'll skip them)
            const issues = await github.paginate(
              github.rest.issues.listForRepo,
              { owner, repo, state: "open", per_page: 100 }
            );

            const commentMarker = '<!-- notesvault-guidelines -->';
            
            // Read the comment body from a file
            const body = require('fs').readFileSync('.github/ISSUE_GUIDELINES_COMMENT.md', 'utf8');
            
            // Use the search API to find open issues that are not PRs and do NOT contain the comment marker.
            // This is much more efficient than fetching all issues and then all comments for each issue.
            const q = `repo:${owner}/${repo} is:issue is:open -"${commentMarker}"`;
            const issues = await github.paginate(github.rest.search.issuesAndPullRequests, { q });
            
            if (issues.length === 0) {
              console.log("No issues found that need a guidelines comment. All done!");
              return;
            }
            
            for (const issue of issues) {
              if (issue.pull_request) continue;

              const commentsResp = await github.rest.issues.listComments({
                owner, repo, issue_number: issue.number, per_page: 100
              });

              const already = commentsResp.data.some(c => c.body && c.body.includes('<!-- notesvault-guidelines -->'));
              if (already) {
                console.log(`Skipping #${issue.number} ‚Äî guidelines already posted.`);
                continue;
              }

              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: issue.number,
                body: "üëã Thanks for opening this issue! We'll look into it as soon as possible, estimated time for response is **18‚Äì24 hrs**.\nIf your issue goes stale beyond this timeframe, kindly contact mentors or PAs via our [Discord server](https://discord.gg/thMjv3HtP2).\n### ‚è±Ô∏è Issue response & contact\n- In the meantime, provide screenshots, videos, or other context to speed review and assignment.\n- If relevant, **please mention whether this issue is raised under _GGSoC_ or _OSCI_** when you create the issue.\n- If you have questions, comment below or ping any mentor on [discord](https://discord.gg/thMjv3HtP2).\n---\n### üìù Guidelines for Raising Issues\nTo ensure quality moving forward:\n\n**For UI/UX contributions**\n\n- You **must include a design** (Figma link, image, or wireframe) when raising an issue **(if applicable)**.\n- Issues without visual references will **not be accepted**.\n- If the change is a modification, share screenshots of the area you want to change.\n\n**For Backend contributions**\n\n- You **must share a brief execution plan** what you intend to build, how it works, and why it's needed.\n- Vague issues will be closed without review.\n---\n### üìù Guidelines for Opening Pull Requests\n- **Your PRs should target the \`master\` branch.**\n- **No one is allowed to push directly to \`main\`.**\n- **All PRs which do not mention an issue will be closed without review.**\n- **Do NOT raise a PR unless the issue is assigned to you.**\n---\n### ‚úÖ Quick checklist (please attach before requesting assignment)\n- [ ] Design link or screenshot (for UI/UX)  \n- [ ] Execution plan (for backend)  \n- [ ] Mention if this is under **GGSoC** / **OSCI**  \n- [ ] Any related issue/PR numbers referenced\n---\nHappy contributing üöÄ\n<!-- notesvault-guidelines -->"
              });

              console.log(`Commented on #${issue.number}`);
              await github.rest.issues.createComment({ owner, repo, issue_number: issue.number, body });
              console.log(`Commented on #${issue.number}: ${issue.title}`);
            }

            console.log('All done.');
            
            console.log(`\nFinished commenting on ${issues.length} issues.`);
